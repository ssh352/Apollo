1.tempest简介
  Tempest可以自动寻找，执行测试。自动查找当前目录下所有以[Tt]est开头的Python源文件，并且按此规则递归查找子目录；所有以[Tt]est开头的Python源文件里所有  以[Tt]est开头的function和class，以及继承自unittest.TestCase的class(不需要以[Tt]est开头)都会被执行。
  
2.tempest使用
  2.1.安装 pip install tempest
  2.2.初始化 tempest init cloud01
  2.3.执行tempest用例  tempest run --workspace cloud-01 --regex 'xxxx'
  例子：tempest run --workspace testcloudtempest --regex fn_tempest_plugin.tests.pub_cloud.scenario.vpn.test_vpn_algo
  
3.tempest原理
  3.1.架构图 Test Server <==(Http Request/Http Response)==>[Controller Node-->Compute Node](Openstack Setup)
  3.2.原理 Tempest测试用例其实就是调用各个组件的client发送相应的REST请求到OpenStack，执行相应的命令，然后返回给tempest的用例，然后用例根据返回信息再做相应的判断来确定环境是否正确。
  
4.tempest执行流程
  4.1.方法级别函数 setup（）、teardown（）、addCleanup()
  4.2.类级别函数 setUpClass()、tearDownClass（）
  例子：
  import tempest.test


  class SetUpTest(tempest.test.BaseTestCase):
    @classmethod
    def skip_checks(cls):
        print "skip_checks"

    @classmethod
    def setup_credentials(cls):
        print "setup_credentials"

    @classmethod
    def setup_clients(cls):
        print "setup_clients"

    @classmethod
    def resource_setup(cls):
        print "resource_setup"

    def setUp(self):
        super(SetUpTest, self).setUp()
        print "test set up!"

    def test_001(self):
        print "test 001"

    def test_002(self):
        print "test 002"

    def tearDown(self):
        super(SetUpTest, self).tearDown()
        print "tearDown"
        
5.关于python单元测试unittest
unittest：作为标准python中的一个模块，是其它框架和工具的基础，参考资料是它的官方文档：http://docs.python.org/2.7/library/unittest.html 和源代码，在这里主要总结它的一些重要概念、关键点。
首先通过查看unittest的源码，来看一下这几个概念，以及他们之间的关系，他们是如何在一起工作的，其静态类图如下：
http://www.spasvo.com/ckfinder/userfiles/images/2014_5_15_4.jpg
  a.一个TestCase的实例就是一个测试用例。测试用例就是一个完整的测试流程，包括测试前准备环境的搭建(setUp)，执行测试代码(run)，以及测试后环境的还原(tearDown)。元测试(unit test)的本质也就在这里，一个测试用例是一个完整的测试单元，通过运行这个测试单元，可以对某一个问题进行验证。
  b.TestSuite：而多个测试用例集合在一起，就是TestSuite，而且TestSuite也可以嵌套TestSuite。
  c.TestLoader是用来加载TestCase到TestSuite中的，其中有几个loadTestsFrom__()方法，就是从各个地方寻找TestCase，创建它们的实例，然后add到TestSuite中，再返回一个TestSuite实例。
  d.TextTestRunner是来执行测试用例的，其中的run(test)会执行TestSuite/TestCase中的run(result)方法。
  e.TextTestResult：测试的结果会保存到TextTestResult实例中，包括运行了多少测试用例，成功了多少，失败了多少等信息。
这样整个流程就清楚了，首先是要写好TestCase，然后由TestLoader加载TestCase到TestSuite，然后由TextTestRunner来运行TestSuite，运行的结果保存在TextTestResult中，整个过程集成在unittest.main模块中。
现在已经涉及到了test case, test suite, test runner这三个概念了，还有test fixture没有提到，那什么是test fixture呢？在TestCase的docstring中有这样一段话：
 
Test authors should subclass TestCase for their own tests. Construction and deconstruction of the test's environment ('fixture') can be implemented by overriding the 'setUp' and 'tearDown' methods respectively.
 
Fixture就是对一个测试用例环境的搭建和销毁，通过覆盖或重写TestCase的setUp()和tearDown()方法来实现。
Fixture作用：比如说在这个测试用例中需要访问数据库，那么可以在setUp()中建立数据库连接以及进行一些初始化，在tearDown()中清除在数据库中产生的数据，然后关闭连接。注意tearDown的过程很重要，要为以后的TestCase留下一个干净的环境。关于fixture，还有一个专门的库函数叫做fixtures，功能更加强大。
