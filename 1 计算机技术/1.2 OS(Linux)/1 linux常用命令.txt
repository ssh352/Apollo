[Shell命令]
文件内容搜索     /          //末行模式：在一般模式中输入":"或"/"，可以搜索、替换，显示行号。
./configure -> make -> make install      //linux通过源代码编译安装程序过程
awk
    awk 'BEGIN{ commands } pattern{ commands } END{ commands }'  //工作原理
    -F    # 域分隔字段
    cat /proc/meminfo | grep MemFree | awk -F : '{print $0}'
[例子]
1.awk 'BEGIN{ sum=0; print "Total:" } { print $1; sum+=$1 } END{ print "Equal";print sum }' add.txt > total.txt  # 获取文件中第一个字段的和

cat /etc/redhat-release     //查看Redhat OS版本操作系统信息
cat /proc/version          //查看所有操作系统信息
cat lineitem.tbl |wc -l          //查看tbl中有多少条记录信息
chmod -R 777 /upload     //要修改文件夹内所有的文件和文件夹及子文件夹属性为可写可读可执行
chmod 777 *.*               //要修改目录下所有文件属性可写可读可执行
chown -R mysql:mysql /dfs/mysql          //数据库文件权限
curl -L http://www.huawei.com          //重定向访问指定网址
dd    //用指定大小的块拷贝一个文件，并在拷贝的同时进行指定的转换
    dd if=/dev/zero of=temp.img bs=1G count=10
df -h                    //打印文件系统空间使用情况
du -h filename          //查看文件大小
du -hs dirname               //查看目录大小
du -h dirname                    //查看目录下所有文件大小
du -sh *     //查看目录所占空间
echo > profile               //清空文件内容
echo $JAVA_HOME               //显示当前系统使用的环境变量
env | grep MESOS          //查看带MESOS配置的环境变量
ethtool eth0          //查看网卡状态
fdisk -l               //查看硬盘分区情况
find /（查找范围） -name '查找关键字' -type d     //查找目录
find /（查找范围） -name 查找关键字 -print          //查找文件
    find ./ -name "p650*" -exec `rename p650 p660 p650*` {} \;    //批量修改文件名
    find ./ -name "*kvm" -exec dirname {} \; | awk '{print $0"/kvm " $0"/KVM"}' | xargs -n2 mv
gcc test.c –o test          //编译程序test.c输出test可执行文件
gcc –g hello.c –o hello     //生成可调试程序hello
grep                         //文本搜索工具，可以使用正则表达式
    -v    //显示不包含匹配文本的所有行
    ^    //匹配正则表达式的开始行
    &    //匹配正则表达式的结束行
hwclock
    -r    //读取并打印硬件时钟
    -s    //将硬件时钟同步到系统时钟
    -w    //将系统时钟同步到硬件时钟
head
hostname    //修改主机名
  /proc/sys/kernel/hostname(SuSE)
ifconfig               //显示或配置网络设备
ifconfig eth0 192.168.0.1 netmask 255.255.255.0
less               
ln    #创建软连接
    ln -s target link
logger    #通过命令使用syslog系统日志
ls -lht          //查看文件大小（按实际情况显示K,M,G）
    ls | wc -c
    ls | wc -w    //显示多少个一级目录（或文件）
lsb_release –a               //查看SUSU OS版本操作系统信息 
lsmod          //显示已载入系统的模块
lspci    //查看系统的外部设备
    0000:00:1f.1  而 0000:00:1f.1则是一个PCI外设的地址,它以冒号和逗号分隔为4个部分，第一个16位表示域，第二个8位表示一个总线编号，第三个5位表示一 个设备号，最后是3位，表示功能号。
mkdir    //建立子目录
    -p    //确保目录名称存在，如果目录不存在就新创建一个
modinfo          //显示kernel模块的对象文件，并显示该模块的相关信息
mount /dev/sdb /mnt          //把sdb盘挂载
more                         //显示文件内容，不支持后退
netstat -anp|grep 7077  //查看端口号为7077的服务
netstat -tunlp|grep 22  //查看端口占用情况
nohup command [arg...] [&]     //后台运行命令，命令输入日志在nohup.out中
P
pip install    //安装软件包
pip uninstall    //卸载软件包
pip list    //列出所有已安装软件包
pip search    //从PyPi上搜索软件包
pip install [package] --upgrade    //更新软件包

rpm
    -ivh          #安装一个包
    -Uvh          #升级一个包
    -e          #卸载一个包
--force 强制操作 如强制安装删除等； 
--requires 显示该包的依赖关系； 
--nodeps 忽略依赖关系并继续操作
rpm -ivh /tmp/xxx.rpm     //linux rpm包的安装
rpm -qa                    //查询系统中安装的所有rpm包
rpm -e --nodeps mysql-5.1.2-el7(rmp -e mysql-5.1.2-el7 --nodeps)     //无依赖卸载rpm包
sed                    //流编辑器
sed -i "s/book/books/g" file          //把file文件中book都替换成books
sort                         //将文件中各行按字母进行排序
systemctl status iptables.service     //查看防火墙状态
shutdown -r now               //重启系统
scp
     scp -r root@192.168.1.72:/tmp/test ./tmp     //拷贝远程服务器的目录到本地服务器
     scp -r tmp root@192.168.1.72:/tmp/test          //拷贝本地服务器的目录到远程服务器
service network restart          //重启网卡
     ifconfig eth0 down          
     ifconfig eth0 up          //重启eth0单独一块网卡
uname -a                    //显示当前计算机和操作系统的名称、版本和其他细节。
sed -i "s/111/222/g" 2.txt  //把2.txt文件中111字段替换成222
tail
tar -xvf xx.tar               //tar包解压
tar -zxvf xx.tar.gz          //gz包解压
tar -jxvf xx.tar.bz2     //bz2包解压
tar -czvf test.tar.gz test     将test文件打包并压缩
time   #统计命令执行时间
    time command args    #统计命令执行时间
rm
     rm  test.txt               //删除test.txt文件     
     rm -i *.log                    //删除任何.log文件，删除前逐一询问确认
     rm -rf test                    //删除test目录，并且不用逐一确认
vi编辑文件的快捷方式
     :1或gg          //跳到文件头
     :$或G           //跳到文件尾
wc -l               //显示文件行数
which python     //查看可执行文件的位置
whereis python     //查看文件的位置
xargs
Y
yum
    yum install    //安装软件
    yum remove    //卸载软件
    yum search    //从repo上查找软件包，不一定在本地安装的
    yum list    //列出所有可安装的软件
    yum updates  //列出所有可更新的软件
    yum list installed    //列出所有已安装的软件包
    yum list extras    //列出已安装但不在repo内的软件包
    yum info    //获取软件包信息
    yum clean headers/packages/all    //清空yum的缓存
/dev/zero    //数据来源。是一个输入设备，可用来初始化文件
/dev/null    //数据接收。外号无底洞，可以向它输出任何数据
/etc/hostname     //修改hostname信息
/var/log          //常见日志文件
command > /dev/null          //执行命令同时屏幕上不显示，把输出信息传送到null中去，这样做不占用磁盘空间

Shell脚本
#!/usr/bin/env bash
echo "export MESOS_NATIVE_JAVA_LIBRARY=$MESOS_HOME/lib/libmesos.so" >> release/conf/spark-env.sh     //把内容写入文件
#                                   //注释
echo `command`                    //显示执行命令的结果
$
  $0  #当前脚本文件名
  $num  #num为从1开始的数字，$n是第几个参数
  $#  #传入脚本的参数个数
  $*  #所有的位置参数（作为单个字符串）
  $@  #所有的位置参数（每个都作为独立的字符串）
  $?  #当前shell进程中，上一个命令的返回值
  $$  #当前shell进程的pid
  $!  #后台运行的最后一个进程的pid
  $-  #显示shell使用的当前选项
  $_  #之前命令的最后一个参数

    $var      #返回变量值
    ${var}    #返回变量值
    ${#var}      #返回改变量字符串的长度
    ${var:start_index}    #返回从start_index开始一直到字符串末尾
    ${var:start_index:length}    #返回从start_index开始的length个字符
    ${var#string}    #返回从左边删除string后的字符串，尽量短的去匹配
    ${var##string}   #返回从左边删除string后的字符串，尽量长的去匹配

$VAR,${VAR}                         //定义变量
${#string}                         //获取字符串长度
${数组名[下标]}                    //数组元素
$? //上一次程序退出的返回值
$(function)
${variable}
$n                                   //调用函数时候时传递的参数 0-当前脚本文件名

=~    字符串匹配

[文件比较]
文件表达式
if [ -e  file ]    如果文件存在，则为真；否则为假。
if [ -f  file ]    如果文件存在
if [ -d ...   ]    如果目录存在
if [ -s file  ]    如果文件存在且非空 
if [ -r file  ]    如果文件存在且可读
if [ -w file  ]    如果文件存在且可写
if [ -x file  ]    如果文件存在且可执行

整数变量表达式
if [ int1 -eq int2 ]    如果int1等于int2   
if [ int1 -ne int2 ]    如果不等于    
if [ int1 -ge int2 ]       如果>=
if [ int1 -gt int2 ]       如果>
if [ int1 -le int2 ]       如果<=
if [ int1 -lt int2 ]       如果<
if [ -z "$VAR"]    判断变量长度是否为0
if [ -n "$VAR"]    判断变量长度是否为非0

-eq,-ne,-gt,-ge,-lt,-le          //数值比较
command > file                    //输出重定向，输出到显示器的内容被重定向到文件中
command >> file                    //追加内容到文件中
command < file                    //输入重定向，从文件中读取内容
if...then...fi                    //if控制结构
for...in...do...done          //for循环结构
unset var                         //删除变量
while...do..done               //while循环结构

交互式程序(命令)<<EOF     //<<EOF表示后续输入作为子命令，直到遇到EOF才返回主调shell
command1
command2
EOF

变量赋值
venv=${1:-cover}  # 如果函数有第一个参数，就返回这个参数，如果没有，就返回cover。

复杂语句
kill -9 `ps -ef |grep install | grep  -v grep |awk '{print $2}'`  # kill掉包含有install字符串的进程号

快捷键
ctrl+c    强制中止程序的执行
ctrl+z    将任务中止，放在后台执行
ctrl+d    表示一个特殊的二进制值，表示EOF.在shell中表示退出当前shell
