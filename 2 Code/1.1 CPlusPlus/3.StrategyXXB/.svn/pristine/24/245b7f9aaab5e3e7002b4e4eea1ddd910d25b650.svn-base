#pragma once
#include "AbstractStrategy.h"
#include "KBarGenerater.h"
#include "KBarGenerater1.h"
#include "MTOrderExcuter.h"
#include "LastTickMap.h"
#include "KBarMap.h"
using namespace Abstract;
namespace Abstract {


	/* 该抽象类能产生onbar 事件*/
	// todo:在未来可以在这个策略实现条件单
	/* */
	class BASELIB_API AbstractBarStrategy:public AbstractStrategy{
	public:
		AbstractBarStrategy();
		virtual ~AbstractBarStrategy();
		
	protected:
		virtual void  OnBar(TKDATA kbar) = 0;
		virtual void  OnRtnDepthMarketDataV(CThostFtdcDepthMarketDataField *pDepthMarketData) = 0;//先调用此函数　才会再调用OnBar 代替OnRtnDepthMarketData的功能　因为原先的函数需要做一个常规动作 //是否需要这个函数？ 在这个抽象类里面可以实现类似云挂单的管理器
		virtual void OnRtnDepthMarketData(CThostFtdcDepthMarketDataField *pDepthMarketData) final;//
		virtual void OnInit() final;
		virtual void OnTime(tm t) final;
		virtual void OnTimeV(tm t);
		virtual void OnInitV();
		virtual void OnReset();
		virtual void CanMerge(string instrumentid,string start,string end) final;//K线加工类准备好，可以接受第一根K线融合
	protected:

		MTOrderExcuter* mtorderexcuter;  //mt
		LastTickMap* lasttickmap;
	protected:
	
		KBarMap * kbarmap;

	};



}